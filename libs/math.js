const {create, all} = require('mathjs');
const math = create(all, {})

math.lagmat = (lag, vector) => {
    const [m] = vector.size();
    if(m < lag) throw "Lag cannot be greater than m";
    const result = [];
    for(i = 0; i <= m - lag; i ++) {
        const current = [];
        for(j = i; j < i + lag; j++) {
            current[j - i] = (vector.get([j]));
        }
        result[i] = current;
    }
    return math.matrix(result);
}

const ttable = [
    [0.158, 	1    ,	2    ,	3.078, 	6.314, 	12.706, 31.821, 64 ,	637  ],
    [0.142, 	0.816, 	1.386, 	1.886, 	2.92 ,	4.303 ,	6.965 ,	10 ,	31.59],
    [0.137, 	0.765, 	1.25 ,	1.638, 	2.353, 	3.182 ,	4.541 ,	5.8, 	12.92],
    [0.134, 	0.741, 	1.19 ,	1.533, 	2.132, 	2.776 ,	3.747 ,	4.6, 	8.61 ],
    [0.132, 	0.727, 	1.156, 	1.476, 	2.015, 	2.571 ,	3.365 ,	4.0, 	6.869],
    [0.131, 	0.718, 	1.134, 	1.44 ,	1.943, 	2.447 ,	3.143 ,	3.7, 	5.959],
    [0.13 ,	    0.711, 	1.119, 	1.415, 	1.895, 	2.365 ,	2.998 ,	3.4, 	5.408],
    [0.13 ,	    0.706, 	1.108, 	1.397, 	1.86 ,	2.306 ,	2.896 ,	3.3, 	5.041],
    [0.129, 	0.703, 	1.1  ,	1.383, 	1.833, 	2.263 ,	2.821 ,	3.2,	4.781],
    [0.129, 	0.7  ,	1.093, 	1.372, 	1.812, 	2.228 ,	2.764 ,	3.1, 	4.587],
    [0.129, 	0.697, 	1.088, 	1.363, 	1.796, 	2.201 ,	2.718 ,	3.1, 	4.437],
    [0.128, 	0.695, 	1.083, 	1.356, 	1.782, 	2.179 ,	2.681 ,	3.0, 	4.318],
    [0.128, 	0.694, 	1.079, 	1.35 ,	1.771, 	2.16  ,	2.65  ,	3.0, 	4.221],
    [0.128, 	0.692, 	1.076, 	1.345, 	1.761, 	2.145 ,	2.624 ,	2.9, 	4.14 ],
    [0.128, 	0.691, 	1.074, 	1.341, 	1.753, 	2.131 ,	2.602 ,	2.9, 	4.073],
    [0.128, 	0.69 ,	1.071, 	1.337, 	1.746, 	2.12  ,	2.583 ,	2.9, 	4.015],
    [0.128, 	0.689, 	1.069, 	1.333, 	1.74 ,	2.11  ,	2.567 ,	2.8, 	3.965],
    [0.127, 	0.688, 	1.067, 	1.33 ,	1.734, 	2.101 ,	2.552 ,	2.8, 	3.922],
    [0.127, 	688  ,	1.066, 	1.328, 	1.729, 	2.093 ,	2.539 ,	2.8, 	3.883],
    [0.127, 	0.687, 	1.064, 	1.325, 	1.725, 	2.086 ,	2.528 ,	2.8, 	3.85 ],
    [0.127, 	0.686, 	1.063, 	1.323, 	1.721, 	2.08  ,	2.518 ,	2.8, 	3.819],
    [0.127, 	0.686, 	1.061, 	1.321, 	1.717, 	2.074 ,	2.508 ,	2.8, 	3.792],
    [0.127, 	0.685, 	1.06 ,	1.319, 	1.714, 	2.069 ,	2.5   ,	2.8, 	3.767],
    [0.127, 	0.685, 	1.059, 	1.318, 	1.711, 	2.064 ,	2.492 ,	2.7, 	3.745],
    [0.127, 	0.684, 	1.058, 	1.316, 	1.708, 	2.06  ,	2.485 ,	2.7, 	3.725],
    [0.127, 	0.684, 	1.058, 	1.315, 	1.706, 	2.056 ,	2.479 ,	2.7, 	3.707],
    [0.137, 	0.684, 	1.057, 	1.314, 	1.703, 	2.052 ,	2.473 ,	2.7, 	3.69 ],
    [0.127, 	0.683, 	1.056, 	1.313, 	1.701, 	2.048 ,	2.467 ,	2.7, 	3.674],
    [0.127, 	0.683, 	1.055, 	1.311, 	1.699, 	2.045 ,	2.462 ,	2.7, 	3.649],
    [0.127, 	0.683, 	1.055, 	1.31 ,	1.697, 	2.042 ,	2.457 ,	2.7,	3.656]];

const tprob = [0.9, 	0.5, 	0.3, 	0.2, 	0.1, 	0.05, 	0.02, 	0.01, 	0.001];

math.pvalue = (tvalue, df) => {
    for(i in tprob) {
        if(tvalue < ttable[i]) {
            return tprob[math.max(0, i - 1)];
        }
    }
    return 0.001;
} 

module.exports = math;